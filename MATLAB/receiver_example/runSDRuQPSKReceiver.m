function BER = runSDRuQPSKReceiver(prmQPSKReceiver, printData)
%

%   Copyright 2012-2021 The MathWorks, Inc.

%#codegen
persistent qpskRx radio
if isempty(qpskRx)
    qpskRx = QPSKReceiver(...
        'ModulationOrder',                      prmQPSKReceiver.ModulationOrder, ...
        'SampleRate',                           prmQPSKReceiver.Fs, ...
        'DecimationFactor',                     prmQPSKReceiver.Decimation, ...
        'FrameSize',                            prmQPSKReceiver.FrameSize, ...
        'HeaderLength',                         prmQPSKReceiver.HeaderLength, ...
        'NumberOfMessage',                      prmQPSKReceiver.NumberOfMessage, ...
        'PayloadLength',                        prmQPSKReceiver.PayloadLength, ...
        'DesiredPower',                         prmQPSKReceiver.DesiredPower, ...
        'AveragingLength',                      prmQPSKReceiver.AveragingLength, ...
        'MaxPowerGain',                         prmQPSKReceiver.MaxPowerGain, ...
        'RolloffFactor',                        prmQPSKReceiver.RolloffFactor, ...
        'RaisedCosineFilterSpan',               prmQPSKReceiver.RaisedCosineFilterSpan, ...
        'InputSamplesPerSymbol',                prmQPSKReceiver.Interpolation, ...
        'MaximumFrequencyOffset',               prmQPSKReceiver.MaximumFrequencyOffset, ...
        'PostFilterOversampling',               prmQPSKReceiver.Interpolation/prmQPSKReceiver.Decimation, ...
        'PhaseRecoveryLoopBandwidth',           prmQPSKReceiver.PhaseRecoveryLoopBandwidth, ...
        'PhaseRecoveryDampingFactor',           prmQPSKReceiver.PhaseRecoveryDampingFactor, ...
        'TimingRecoveryDampingFactor',          prmQPSKReceiver.TimingRecoveryDampingFactor, ...
        'TimingRecoveryLoopBandwidth',          prmQPSKReceiver.TimingRecoveryLoopBandwidth, ...
        'TimingErrorDetectorGain',              prmQPSKReceiver.TimingErrorDetectorGain, ...
        'PreambleDetectorThreshold',            prmQPSKReceiver.PreambleDetectorThreshold, ...    
        'DescramblerBase',                      prmQPSKReceiver.ScramblerBase, ...
        'DescramblerPolynomial',                prmQPSKReceiver.ScramblerPolynomial, ...
        'DescramblerInitialConditions',         prmQPSKReceiver.ScramblerInitialConditions,...
        'BerMask',                              prmQPSKReceiver.BerMask, ...
        'PrintOption',                          printData);

    
    % Create and configure the SDRu System object. Set the SerialNum for B2xx
    % radios and IPAddress for X3xx, N2xx, N3xx, and USRP2 radios. MasterClockRate
    % is not configurable for N2xx and USRP2 radios.
    switch prmQPSKReceiver.Platform
        case {'B200','B210'}
            radio = comm.SDRuReceiver(...
                'Platform',             prmQPSKReceiver.Platform, ...
                'SerialNum',            prmQPSKReceiver.Address, ...
                'MasterClockRate',      prmQPSKReceiver.MasterClockRate, ...
                'CenterFrequency',      prmQPSKReceiver.USRPCenterFrequency, ...
                'Gain',                 prmQPSKReceiver.USRPGain, ...
                'DecimationFactor',     prmQPSKReceiver.USRPDecimationFactor, ...
                'SamplesPerFrame',      prmQPSKReceiver.USRPFrameLength, ...
                'OutputDataType',       'double');
        case {'X300','X310'}
            radio = comm.SDRuReceiver(...
                'Platform',             prmQPSKReceiver.Platform, ...
                'IPAddress',            prmQPSKReceiver.Address, ...
                'MasterClockRate',      prmQPSKReceiver.MasterClockRate, ...
                'CenterFrequency',      prmQPSKReceiver.USRPCenterFrequency, ...
                'Gain',                 prmQPSKReceiver.USRPGain, ...
                'DecimationFactor',     prmQPSKReceiver.USRPDecimationFactor, ...
                'SamplesPerFrame',      prmQPSKReceiver.USRPFrameLength, ...
                'OutputDataType',       'double');
        case {'N200/N210/USRP2'}
            radio = comm.SDRuReceiver(...
                'Platform',             prmQPSKReceiver.Platform, ...
                'IPAddress',            prmQPSKReceiver.Address, ...
                'CenterFrequency',      prmQPSKReceiver.USRPCenterFrequency, ...
                'Gain',                 prmQPSKReceiver.USRPGain, ...
                'DecimationFactor',     prmQPSKReceiver.USRPDecimationFactor, ...
                'SamplesPerFrame',      prmQPSKReceiver.USRPFrameLength, ...
                'OutputDataType',       'double');
        case {'N300','N310'}
            radio = comm.SDRuReceiver(...
                'Platform',             prmQPSKReceiver.Platform, ...
                'IPAddress',            prmQPSKReceiver.Address, ...
                'MasterClockRate',      prmQPSKReceiver.MasterClockRate, ...
                'CenterFrequency',      prmQPSKReceiver.USRPCenterFrequency, ...
                'Gain',                 prmQPSKReceiver.USRPGain, ...
                'DecimationFactor',     prmQPSKReceiver.USRPDecimationFactor, ...
                'SamplesPerFrame',      prmQPSKReceiver.USRPFrameLength, ...
                'OutputDataType',       'double');
        case {'N320/N321'}
            radio = comm.SDRuReceiver(...
                'Platform',             prmQPSKReceiver.Platform, ...
                'IPAddress',            prmQPSKReceiver.Address, ...
                'MasterClockRate',      prmQPSKReceiver.MasterClockRate, ...
                'CenterFrequency',      prmQPSKReceiver.USRPCenterFrequency, ...
                'Gain',                 prmQPSKReceiver.USRPGain, ...
                'DecimationFactor',     prmQPSKReceiver.USRPDecimationFactor, ...
                'SamplesPerFrame',      prmQPSKReceiver.USRPFrameLength, ...
                'OutputDataType',       'double');            
    end
end

% Initialize variables

rcvdSignal = complex(zeros(prmQPSKReceiver.USRPFrameLength,1));
BER = [];
currentTime = 0;
overflow = uint32(0);

while currentTime < prmQPSKReceiver.StopTime

    [rcvdSignal, ~, overflow] = step(radio);

    if ~overflow % Avoid overflow frames for continuous-mode receiver synchronization
        [~, ~, ~, BER] = qpskRx(rcvdSignal); % Receiver
    end
    
    currentTime = currentTime + prmQPSKReceiver.USRPFrameTime;

end

release(qpskRx);
release(radio);
